// Generated by CoffeeScript 1.10.0
(function() {
  var EPS, STYLES, appendSVG, concat, drawArea, drawCircle, drawCycle, drawPath, drawPointedCycle, drawText, max, min, sum;

  EPS = 0.000000001;

  sum = function(a, b) {
    return a + b;
  };

  max = function(a, b) {
    return Math.max(a, b);
  };

  min = function(a, b) {
    return Math.min(a, b);
  };

  concat = function(a, b) {
    return a.concat(b);
  };

  STYLES = '.line  { fill: none; stroke-width: 3; stroke-linecap: round; stroke-linejoin: round; } .line.red   { stroke: red; } .line.blue  { stroke: blue; } .line.black { stroke: black; } .point { stroke: none; } .point.red   { fill: red; } .point.blue  { fill: blue; } .point.black { fill: black; } .text { font-family: monospace; font-size: 10; } .text.red   { fill: red; } .text.blue  { fill: blue; } .text.black { fill: black; } .svg { border-style: solid; border-width: 2px; background-color: #EEE; }';

  drawArea = {};

  window.onload = function() {
    var svg;
    drawArea = document.getElementById('draw');
    svg = appendSVG(drawArea, 'svg', {
      width: 400,
      height: 400,
      viewBox: '0 0 10 10'
    });
    drawCircle(svg, [5, 5], 1);
    return svg.setAttribute('viewBox', '0 0 7 7');
  };

  appendSVG = function(container, tag, attrs) {
    var el, k, v;
    if (attrs == null) {
      attrs = {};
    }
    el = document.createElementNS('http://www.w3.org/2000/svg', tag);
    for (k in attrs) {
      v = attrs[k];
      el.setAttribute(k, v);
    }
    return container.appendChild(el);
  };

  drawCircle = function(svg, center, radius, attrs) {
    if (attrs == null) {
      attrs = {
        "class": 'black point'
      };
    }
    attrs.cx = center[0];
    attrs.cy = center[1];
    attrs.r = radius;
    return appendSVG(svg, 'circle', attrs);
  };

  drawText = function(svg, center, str, attrs) {
    var text;
    if (attrs == null) {
      attrs = {
        "class": 'black text'
      };
    }
    attrs.x = center[0];
    attrs.y = center[1];
    text = appendSVG(svg, 'text', attrs);
    text.innerHTML = str;
    return text;
  };

  drawPath = function(svg, coords, attrs) {
    var c, i, j, len;
    if (attrs == null) {
      attrs = {
        "class": 'black line'
      };
    }
    attrs.d = 'M ';
    for (i = j = 0, len = coords.length; j < len; i = ++j) {
      c = coords[i];
      attrs.d += (i !== 0 ? ' L ' : '') + c[0] + ' ' + c[1];
    }
    return appendSVG(svg, 'path', attrs);
  };

  drawCycle = function(svg, coords, attrs) {
    return drawPath(svg, coords.concat([coords[0]]), attrs);
  };

  drawPointedCycle = function(svg, coords, rad, attrs) {
    var c, j, len;
    for (j = 0, len = coords.length; j < len; j++) {
      c = coords[j];
      drawCircle(svg, c, rad);
    }
    return drawCycle(svg, coords, attrs);
  };

}).call(this);
